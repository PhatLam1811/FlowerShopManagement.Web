<div class="form-check mb-3">
	@if (cartItem.items.Amount > 0) {
		<input class="form-check-input fs-4 me-2"
		   type="checkbox"
		   id="defaultCheck1"
		   checked=@isSelected
		   @onchange="SelectItem">
	}
	<div class="card d-flex flex-row">
		@if (cartItem != null && cartItem.items != null && cartItem.items.Pictures != null)
		{
			<img src="image/@cartItem.items.Pictures[0]" class="card-img-top w-25" style="height: 160px;" />

		}
		else
		{
			<img src="image/flower2.png" class="card-img-top w-25" style="height: 160px;" />
			
		}
		<div class="card-body d-flex flex-column justify-content-between">
			<div class="">
				<div class="d-flex justify-content-between">
					<span class="h4">@cartItem.items.Name</span>
					<span class="h6 icon-arrow cursor hover-icon" @onclick="NavigateToDetail"></span>
				</div>
				<div class="mt-1 d-flex justify-content-between align-items-end">
					<span class="h6">$@cartItem.items.UniPrice</span>
					<span class="h3 fw-bold text-primary">$@(cartItem.items.UniPrice * cartItem.amount)</span>
				</div>
			</div>
			<div class="mt-1 d-flex justify-content-between align-items-end">
				@if (cartItem.items.Amount > 0)
				{
					<Counter count="@((int)cartItem.amount)" max=@cartItem.items.Amount OnGetAmount="ChangeAmount" />
				}
				else
				{
					<p class="h6 fst-italic text-color-secondary">Product sold out temporarily!!</p>
				}

				<p class="icon-delete fs-5 m-0 icon-normal text-color-pink hover-icon" @onclick="RemoveOutOfCart"></p>
			</div>
		</div>
	</div>
</div>

@code {

	[Parameter]
	public CartItemModel cartItem { get; set; }

	[Parameter]
	public string id { get; set; } = null!;

	[Parameter]
	public string url { get; set; } = null!;

	[Parameter]
	public string url1 { get; set; } = null!;

	[Parameter]
	public string url2 { get; set; } = null!;

	[Parameter]
	public string url3 { get; set; } = null!;

	[Parameter]
	public bool isSelected { get; set; } = false;

	[Parameter]
	public EventCallback<string> IsChanged { get; set; }

	protected async void ChangeAmount(int count)
	{
		cartItem.amount = count;
		StateHasChanged();

		await js.InvokeVoidAsync("updateAmount", new object[] { url1, url3, cartItem._productId, count });
	}

	private async void RemoveOutOfCart()
	{
		if (cartItem._productId != null)
		{
			// confirm if user want to remove this item
			var result = await js.InvokeAsync<bool>("confirmRemove", null);
			if (result)
			{
				await js.InvokeVoidAsync("removeCartItem", new object[] { url, url3, cartItem._productId });
				await IsChanged.InvokeAsync(cartItem._productId);
				StateHasChanged();
			}

		}
	}

	private async void SelectItem()
	{
		isSelected = !isSelected;
		StateHasChanged();

		await js.InvokeVoidAsync("updateSelection", new object[] { url2, url3, cartItem._productId, isSelected });
	}

	private void NavigateToDetail()
	{
		UriHelper.NavigateTo("ProductDetail/ProductDetail/" + cartItem._productId, true);
	}
}
