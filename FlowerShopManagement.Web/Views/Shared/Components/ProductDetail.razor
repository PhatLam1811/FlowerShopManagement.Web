<div>
	<p class="h2">@Model.Name</p>
	<div class="form-group mt-4">
		<label for="exampleFormControlInput1" class="h6">Color:</label>
		<span>@Model.Color</span>
	</div>
	<div class="form-group mt-4">
		<label for="exampleFormControlInput1" class="h6 mb-3">Amount</label>
		@if (Model.Amount > 0)
		{
			<Counter max="@Model.Amount" OnGetAmount="ChangeAmount" />
			<small id="passwordHelpInline" class="text-muted">
			Remain: @Model.Amount
		</small>
		}
		else
		{
			<p class="h6 fst-italic text-color-secondary">Product sold out temporarily!!</p>
		}
	</div>
	<div class="form-group mt-4">
		<label for="exampleFormControlInput1" class="h6">Material:</label>
		<span>@Model.Material</span>
	</div>
	<div class="form-group mt-4">
		<label for="exampleFormControlInput1" class="h6">Dimension:</label>
		<span>@Model.Size</span>
	</div>
</div>
<div class="d-flex flex-column">
	@if (Model.Amount > 0)
	{
		<button class="btn btn-secondary w-50 icon-cart fw-bold text-primary" @onclick="AddToCart">Add to Cart</button>
		<button class="btn btn-primary w-50 mt-2 icon-arrow" @onclick="BuyNow">Buy Now</button>
	}
</div>

@code {
	[Parameter]
	public ProductDetailModel Model { get; set; } = null!;

	private int amount { get; set; } = 1;

	[Parameter]
	public string url { get; set; } = null!;

	[Parameter]
	public string url1 { get; set; } = null!;

	protected void ChangeAmount(int count)
	{
		amount = count;
		StateHasChanged();
	}

	private async void AddToCart()
	{
		if (Model.Id != null)
		{
			await js.InvokeVoidAsync("addToCart", new object[] { url, Model.Id, amount });
		}
	}

	private void BuyNow()
	{
		if (Model.Id != null)
		{
			//await js.InvokeVoidAsync("buyNow", new object[] { url1, Model.Id, amount });
			UriHelper.NavigateTo("Order/BuyNow/" + Model.Id + "/" + amount, true);
		}
	}
}
